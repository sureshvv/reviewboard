#summary Instructions for getting reviewboard initially up and running.

= Basic Dependencies =

At the very least, you need:
  * [http://www.python.org python] 2.4 or newer
  * [http://www.djangoproject.com django] 0.96
  * [http://www.sqlite.org sqlite] 3 (not necessary if using mysql)
  * [http://freshmeat.net/projects/patchutils/] patchutils

Additional things you may want:
  * [http://www.mysql.org Mysql] 5.0.31 or newer
  * [http://www.lighttpd.net lighttpd] or [http://www.apache.org apache]
  * [http://www.saddi.com/software/flup flup]
  * [http://public.perforce.com/guest/robert_cowham/perforce/API/python/index.html p4python]
  * [http://pysvn.tigris.org pysvn]
  * [http://code.google.com/p/python-nose nose] and [http://www.nedbatchelder.com/code/modules/coverage.py coverage.py] for running unit tests.

= Configuration =

Django projects are configured through a settings file, which is basically just a python file that defines a bunch of variables.  Most of the settings for reviewboard are deployment-neutral, and these are kept in settings.py.  A few things (such as database configuration, SCM location, etc) need to be configured for each deployment.  These are kept in settings_local.py.

To create this, first copy settings_local.py.tmpl to settings_local.py, then open it in your editor.

== Database ==
The easiest way to get up and running initially is to use sqlite as your database backend:
{{{
DATABASE_ENGINE = 'sqlite3'
DATABASE_NAME = 'reviewboard.sqlite'
}}}
If you would rather use mysql, you need to install it and get it running, and create a database to use.  Creating a special user is optional, especially if mysql is only open to "localhost".  You can then configure django to access it thusly:
{{{
DATABASE_ENGINE = 'mysql'
DATABASE_NAME = 'reviewboard'
DATABASE_USER = 'reviewboard'
DATABASE_PASSWORD = 'password'
DATABASE_HOST = '' # default (localhost)
DATABASE_PORT = '' # default
}}}
Django can use a few other databases, but none except sqlite and mysql have been tested.

== Secret Key ==
Come up with a random string and set it in the `SECRET_KEY` variable.

== Bug Tracker URL ==
The `BUGZILLA_URL` variable is used to configure your bug tracker.  Bug numbers listed in review requests will automatically be hyperlinked to the relevant bugs.  This URL should be a format string with a single "%s" where the bug ID should go in the URL.  For example,
the value in settings_local.py.tmpl is `'http://bugzilla/show_bug.cgi?id=%s'`.  Bugzilla users can just replace "bugzilla" here with the address of their local server.

== Further Reading ==
The [http://www.djangoproject.com/documentation/settings/ django documentation] contains a lot of additional keys that can be set.  In addition, any variables inside settings.py can be overridden in settings_local.py.

= Running The Server =
Now on to the fun part.

== Creating the database ==
You should now be finished configuring reviewboard.  To create the database tables, run
{{{
./manage.py syncdb
}}}

When asked to create a superuser, say "yes" and type in your desired account information.

== Using the built-in web server ==
Now, to run using django's built-in web server, type
{{{
./manage.py runserver
}}}
then open http://127.0.0.1:8000 in your web browser.  If all is working, you should be presented with a login box!  The built-in server is really really slow, so it's not really appropriate for final deployments, but it should get you started.

== Running with apache or lighttpd ==
This is more complicated.  There are some example configuration files for lighttpd and apache inside the conf/ directory in the reviewboard directory to get you started.  Another good resource is the [http://www.djangobook.com/en/beta/chapter21/ Deploying Django] chapter of [http://www.djangobook.com/ The Django Book]

= Final Configuration =

== Set the site URL ==
Log in to http://127.0.0.1:8000/admin as your superuser account.  Click "Sites", then "example.com".  Change both the domain and display names to reference your server.  Without this, emails will have http://example.com/ instead of your reviewboard server.

== Set up repositories ==
In the admin UI, select "Add" next to the "Repositories" label in the Scmtools section.  Give your repository a name and path, and select the type of server.  If your tool requires a login or password, provide those here.  By default, subversion and perforce
tools are available.

The path identifies which server to contact.  For subversion repositories, give the repository path.  For perforce servers, give the contents of your $P4PORT environment variable.  For example:

{{{
 Name: Reviewboard SVN
 Path: http://reviewboard.googlecode.com/svn/
 Username:
 Password:
 Tool: Subversion
}}}

{{{
 Name: Perforce Public
 Path: public.perforce.com:1666
 Username: foo
 Password: bar
 Tool: Perforce
}}}

The astute observer will also notice scmtools/perforce_vmware.py.  This is a specialization of the !PerforceTool which parses the changeset descriptions in use at [http://vmware.com VMware].  Adding special fields to perforce changelists is pretty common with larger depots, so this can be used as an example for how to deal with this.

== Configure Groups ==
When a user first logs in, they will be directed to the user profile page and asked to join groups.  Once again, create these through the django admin UI.  There are two Groups tables -- make sure to add these to the one within the "Reviews" section, not "Auth".  Each group is associated with a mailing list, which will be copied on relevant emails.