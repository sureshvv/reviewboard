#summary Instructions on using the post-review tool

= Using post-review =

post-review is a simple tool that doesn't take too many options. However, its basic usage differs depending on the repository type it's being used with.


== Posting and Updating Review Requests ==

Depending on the repository type, post-review is used in one of two ways. Either with a changeset number, or without. post-review will build the diff and post it to the Review Board server. The diff and any additional review request information will be saved as a draft, which can then be published.

After posting a new review request or updating an existing one, the URL of the review request will be displayed in the terminal.


=== Perforce ===

Perforce has a concept of changesets, which are server-stored descriptions of a change along with an ID number and associated files. For Perforce, Review Board stores changeset numbers of a posted change and can use these to associate particular changes with review requests.

To post a review request for a specific change, or to update an existing review request for that change, type:

{{{
$ post-review CHANGENUM
}}}

Where CHANGENUM is the changeset number in Perforce.

The diff will be generated and uploaded to Review Board, and the review request information will be updated based on the changeset description.


=== CVS and Subversion ===

CVS and Subversion don't have a concept of changesets, so instead the working copy's uncommitted changes are posted for review. To post for review, simply run:

{{{
$ post-review
}}}

This will create a new review request and post the diff of the uncommitted changes. If you instead want to update an existing review request with new changes, use the {{{-r}}} parameter. For example, to update review request #42, type:

{{{
$ post-review -r 42
}}}

If you need to post specific files, leaving other uncommitted files out of the review request, you can include them on the command line, like so:

{{{
$ post-review src/foo.c data/bar.png
}}}


=== Posting Committed Code ===

The default post-review invocation assumes uncommitted code is to be posted, but sometimes it's useful to post code that has already been committed to a repository, such as in a branch.

In order to do this, you should use the {{{--revision-range}}} parameter, which will generate a diff based on a range of committed revisions. This allows a single review request to be generated based on the entire history of a branch, if desired.

Usage is easy. Simply type:

{{{
$ post-review --revision-range=STARTREV:STOPREV
}}}

Where _STARTREV_ is the beginning revision in the range and _STOPREV_ is the ending revision. If you only need to post a single revision, type:

{{{
$ post-review --revision-range=REVISION
}}}

In order to update an existing review request, use the {{{-r}}} flag, as shown above.


== Options ==

=== -p, --publish ===

This will cause the review request to be published, rather than being saved as a draft.


=== -o, --open ===

By default, Review Board will display the URL of the review request. By passing {{{-o}}} or {{{--open}}}, a web browser will automatically open to this URL.


=== --output-diff ===

This will display the generated diff from post-review to the terminal, instead of posting the diff to a Review Board server.


=== --server ===

By passing {{{--server=_URL_}}}, you can override the Review Board server that post-review will use.

For example:

{{{
$ post-review --server=http://reviews.review-board.org/
}}}


=== --diff-only ===

In the case of Perforce, it is sometimes desirable to update the diff without automatically updating the summary, description or other information. The {{{--diff-only}}} parameter will suppress any updates to the review request information itself.


=== --target-groups ===

This parameter sets the target review groups on the review request. The group names are comma-separated.

For example:

{{{
$ post-review --target-groups=group1,group2
}}}


=== --target-people ===

This works much like {{{--target-groups}}}, but assigns users to the reviewer list.

For example:

{{{
$ post-review --target-people=johnny,greg
}}}


=== --summary ===

This parameter sets the summary on the review request, overriding any summary that currently exists or is set by the change description (in the case of Perforce).

For example:

{{{
$ post-review --summary="This is a test"
}}}


=== --description ===

This works like {{{--summary}}}, but will set the description of the review request.

For example:

{{{
$ post-review --description="This is my changeset description."
}}}


=== --revision-range ===

In cases where existing committed code is to be put up for review, the {{{--revision-range}}} parameter is used to specify the revision or revisions with which to generate the diff.

For example:

{{{
$ post-review --revision-range=42:50
}}}

This will generate a diff based on the changes between revisions 42 and 50 and put it up for review.


=== --r, --review-request-id ===

In order to update an existing review request using repository types that don't contain changesets (such as Subversion or CVS), the {{{-r}}} parameter should be used. This takes the ID of the review request to update.


=== --submit-as ===

This is intended mainly for scripts acting on behalf of a user. This allows a review request to be posted or updated using another user's account. Not all users can use this feature. It can only be used by a post-review script with login credentials of a special user. The special user must have the {{{reviews.can_submit_as_another_user}}} permission.

For example:

{{{
$ post-review --submit-as=johnny
}}}


=== -d, --debug ===

When things go wrong, the {{{--debug}}} flag can be used to get additional information. This will print to the console a variety of debug information, including error responses from the server. It is best to save the results as an HTML file, as some of the errors may contain complicated HTML markup.